framework:
    secret: "RabbitMqBundle Test"
    test: ~

revinate_rabbit_mq:
    connections:
        test:
            user:     'guest'
            password: 'guest'
            host:      'rabbitmq'
            vhost:     '/'
            heartbeat: 1
    exchanges:
        test_topic.tx: { connection: test, type: topic }
        test_direct.tx: { connection: test, type: direct }
        test_fanout.tx: { connection: test, type: fanout }
        test_deadletter.dlx: { connection: test, type: topic }

    producers:
        test_producer: { exchange: test_topic.tx }
        test_string_encoder: { exchange: test_topic.tx, encoder: revinate.rabbit_mq.encoder.string }
        test_php_object_encoder: { exchange: test_topic.tx, encoder: revinate.rabbit_mq.encoder.serialize }
        test_direct_producer: { exchange: test_direct.tx }
        test_fanout_producer: { exchange: test_fanout.tx }

    queues:
        test_zero_q: { exchange: test_topic.tx, routing_keys: ['test.zero'] }
        test_one_q: { exchange: test_topic.tx, routing_keys: ['test.one'] }
        test_two_q: { exchange: test_topic.tx, routing_keys: ['test.two'] }
        test_three_q: { exchange: test_topic.tx, routing_keys: ['test.three'] }
        test_six_q: { exchange: test_topic.tx, routing_keys: ['test.six'] }
        test_six_another_q: { exchange: test_topic.tx, routing_keys: ['test.six'] }
        test_seven_q: { exchange: test_topic.tx, routing_keys: ['test.seven'] }
        test_eight_q: { exchange: test_topic.tx, routing_keys: ['test.eight'] }
        test_four_q: { exchange: test_topic.tx, routing_keys: ['#'] }
        test_five_q: { exchange: test_topic.tx, routing_keys: ['test.*'] }
        test_direct_q: { exchange: test_direct.tx, routing_keys: ['test.direct'] }
        test_one_fanout_q: { exchange: test_fanout.tx }
        test_two_fanout_q: { exchange: test_fanout.tx }
        test_rpc_server_q: { exchange: test_topic.tx, routing_keys: ['rpc.message'] }
        test_nine_q: { exchange: test_topic.tx, routing_keys: ['test.nine'], arguments: { 'x-dead-letter-routing-key': ['S', 'test.#'], 'x-dead-letter-exchange': ['S', 'test_deadletter.dlx'] } }
        test_ten_q: { exchange: test_topic.tx, routing_keys: ['test.ten'], arguments: { 'x-dead-letter-routing-key': ['S', 'test.#'], 'x-dead-letter-exchange': ['S', 'test_deadletter.dlx'] } }
        test_dlx_q: { exchange: test_deadletter.dlx, routing_keys: ['test.#'] }
        test_eleven_q: { exchange: test_topic.tx, routing_keys: ['test.eleven'] }

    consumers:
        test_zero: { queue: test_zero_q, callback: test.one.consumer, idle_timeout: 1 }
        test_one: { queue: test_one_q, callback: test.one.consumer, idle_timeout: 1 }
        test_two: { queue: test_two_q, callback: test.two.consumer, idle_timeout: 1, batch_size: 10, buffer_wait: 100000 }
        test_three: { queue: test_three_q, callback: test.three.consumer, idle_timeout: 1, message_class: Revinate\RabbitMqBundle\Test\Message\CustomMessage }
        test_string_decoder: { queue: test_one_q, callback: test.one.consumer, idle_timeout: 1, decoder: revinate.rabbit_mq.decoder.string }
        test_php_object_decoder: { queue: test_seven_q, callback: test.one.consumer, idle_timeout: 1, decoder: revinate.rabbit_mq.decoder.serialize }
        test_all_messages: { queue: test_four_q, callback: test.one.consumer, idle_timeout: 1 }
        test_all_messages_with_pattern: { queue: test_five_q, callback: test.one.consumer, idle_timeout: 1 }
        test_direct: { queue: test_direct_q, callback: test.one.consumer, idle_timeout: 1  }
        test_one_fanout: { queue: test_one_fanout_q, callback: test.one.consumer, idle_timeout: 1  }
        test_two_fanout: { queue: test_two_fanout_q, callback: test.one.consumer, idle_timeout: 1  }
        test_exception_consumer: { queue: test_three_q, callback: test.exception.consumer, idle_timeout: 1, batch_size: 10, buffer_wait: 100 }
        test_republish: { queue: test_eight_q, callback: test.republish.consumer, idle_timeout: 1  }
        test_reject: { queue: test_four_q, callback: test.reject.consumer, idle_timeout: 1  }
        test_reject_drop_stop: { queue: test_zero_q, callback: test.reject_drop_stop.consumer, idle_timeout: 1  }
        test_reject_requeue_stop: { queue: test_zero_q, callback: test.reject_requeue_stop.consumer, idle_timeout: 1  }
        test_qos: { queue: test_one_q, callback: test.one.consumer, idle_timeout: 1, qos_options: { prefetch_count: 100 } }
        test_self_publish: { queue: test_six_q, callback: test.publish_to_self.consumer, idle_timeout: 1 }
        test_six: { queue: test_six_another_q, callback: test.one.consumer, idle_timeout: 1 }
        test_rpc_server: { queue: test_rpc_server_q, callback: test.rpc.server , idle_timeout: 1}
        test_nine: { queue: test_nine_q, callback: test.nine.consumer, idle_timeout: 1 }
        test_ten: { queue: test_ten_q, callback: test.ten.consumer, idle_timeout: 1 }
        test_dlx: { queue: test_dlx_q, callback: test.dlx.consumer, idle_timeout: 1 }
        test_eleven: { queue: test_eleven_q, callback: test.eleven.consumer, idle_timeout: 1, batch_size: 10, buffer_wait: 100000 }
        test_multiple_consumers: { queues: [test_one_q, test_three_q], callbacks: [test.one.consumer, test.three.consumer], idle_timeout: 1 }
        test_multiple_consumers_alt:
            idle_timeout: 1
            mappings:
                - {queue: test_one_q, callback: test.one.consumer}
                - {queue: test_three_q, callback: test.three.consumer}

services:
  test.one.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestOneConsumer
      arguments: []

  test.two.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestTwoConsumer
      arguments: []

  test.three.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestThreeConsumer
      arguments: []

  test.exception.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestExceptionConsumer
      arguments: []

  test.republish.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\RepublishConsumer
      arguments: []

  test.reject.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\RejectConsumer
      arguments: []

  test.reject_drop_stop.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\RejectDropStopConsumer
      arguments: []

  test.reject_requeue_stop.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\RejectRequeueStopConsumer
      arguments: []

  test.publish_to_self.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\PublishToSelfConsumer
      arguments: []

  test.rpc.server:
      class: Revinate\RabbitMqBundle\Test\Consumer\RpcServer
      arguments: []

  test.nine.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestNineConsumer
      arguments: []

  test.ten.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestTenConsumer
      arguments: []

  test.dlx.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestDLXConsumer
      arguments: []

  test.eleven.consumer:
      class: Revinate\RabbitMqBundle\Test\Consumer\TestElevenConsumer
      arguments: []
